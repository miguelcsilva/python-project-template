[project]
name = "project_name"
requires-python = ">=3.12"

[tool.poetry]
name = "project_name"
version = "0.1.0"
description = ""
authors = []
readme = "README.md"
packages = [
    {include = "project_name", from = "src"}
]

[tool.poetry.dependencies]
python = "^3.12"
pydantic-settings = "*"
structlog = "*"

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-cov = "*"
pre-commit = "*"
mypy = "*"
ruff = "*"

[tool.pytest.ini_options]
testpaths = [
    "tests",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D100", # pydocstyle - missing docstring in public module
    "D101", # pydocstyle - missing docstring in public class
    "D102", # pydocstyle - missing docstring in public method
    "D103", # pydocstyle - missing docstring in public function
    "D104", # pydocstyle - missing docstring in public package
    "D105", # pydocstyle - missing docstring in magic method
    "D106", # pydocstyle - missing docstring in public nested class
    "D107", # pydocstyle - missing docstring in __init__
    "D203", # pydocstyle - one blank line before class docstring
    "D213", # pydocstyle - multi line summary second line
]
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101", # Allow asserts
    "ARG", # Allow unused function args (fixtures)
    "FBT", # Allow booleans as positional arguments: @pytest.mark.parametrize()
]

[tool.mypy]
plugins = ["pydantic.mypy"]
strict = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
